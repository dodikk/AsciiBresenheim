#include "StdAfx.h"
#include "AsciiSceneTest.h"

using namespace AsciiArt::Core;
using namespace AsciiArt::Parser;
using namespace AsciiArt::Rendering;
using namespace AsciiArt::Exceptions;

static const uint sceneSize = 20 * 11;

AsciiSceneTest::AsciiSceneTest(void)
{
}

AsciiSceneTest::~AsciiSceneTest(void)
{
}


void AsciiSceneTest::TestEmptyArrayProducesEmptyScene()
{
    Lines_vt lines;
    std::stringstream output;

    DefaultTextScene<std::stringstream> scene;

    BresenhamePlotter plotter;
    plotter.DrawLinesBeginLinesEndOnSceneWithDelegate( 
        lines.begin(), lines.end(), 
        &scene, &scene );

    //20X10 + newline
    const uchar*** pReceived = (const uchar***)scene.GetPixelMap();
    const uchar expected[20][11] = 
    {
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
    };

    //hot fix

    int rawResult = memcmp( expected, pReceived, sceneSize );
    bool testResult = ( 0 == rawResult  );

    //bool testResult = ( 0 == memcmp( expected, (*pReceived), sceneSize ) );
    //bool testResult = std::equal( expected, expected + sceneSize,  );

    CPPUNIT_ASSERT( testResult );
}

void AsciiSceneTest::TestSinglePointSegmentRenderedCorrectly()
{
    Lines_vt lines;
    LinesParser parser;
    std::ifstream input( "../BresenhameTest/TestData/2-SinglePoint-Input.txt" );
    parser.ParseLines( input, lines );


    DefaultTextScene<std::stringstream> scene;

    BresenhamePlotter plotter;
    plotter.DrawLinesBeginLinesEndOnSceneWithDelegate( 
        lines.begin(), lines.end(), 
        &scene, &scene );

    //20X10 + newline
    const uchar*** pReceived = (const uchar***)scene.GetPixelMap();
    const uchar expected[20][11] = 
    {
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 'A' , 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
    };

    //hot fix

    int rawResult = memcmp( expected, pReceived, sceneSize );
    bool testResult = ( 0 == rawResult  );

    //bool testResult = ( 0 == memcmp( expected, (*pReceived), sceneSize ) );
    //bool testResult = std::equal( expected, expected + sceneSize,  );

    CPPUNIT_ASSERT( testResult );
}

void AsciiSceneTest::TestRangeViolationsProduceCrash()
{
    {
        Lines_vt lines;
        LinesParser parser;
        std::stringstream input( "( -1, 1) - ( 2, 2 )" );
        parser.ParseLines( input, lines );


        DefaultTextScene<std::stringstream> scene;

        BresenhamePlotter plotter;

        CPPUNIT_ASSERT_THROW
            (
            plotter.DrawLinesBeginLinesEndOnSceneWithDelegate( 
            lines.begin(), lines.end(), 
            &scene, &scene ),
            RangeException
            );
    }

    {
        Lines_vt lines;
        LinesParser parser;
        std::stringstream input( "( 0, 0) - ( 10, 2 )" );
        parser.ParseLines( input, lines );


        DefaultTextScene<std::stringstream> scene;

        BresenhamePlotter plotter;

        CPPUNIT_ASSERT_THROW
            (
            plotter.DrawLinesBeginLinesEndOnSceneWithDelegate( 
            lines.begin(), lines.end(), 
            &scene, &scene ),
            RangeException
            );
    }

    {
        Lines_vt lines;
        LinesParser parser;
        std::stringstream input( "( 0, 0) - ( 0, -1 )" );
        parser.ParseLines( input, lines );


        DefaultTextScene<std::stringstream> scene;

        BresenhamePlotter plotter;

        CPPUNIT_ASSERT_THROW
            (
            plotter.DrawLinesBeginLinesEndOnSceneWithDelegate( 
            lines.begin(), lines.end(), 
            &scene, &scene ),
            RangeException
            );
    }

    {
        Lines_vt lines;
        LinesParser parser;
        std::stringstream input( "( 0, 20) - ( 0, 0 )" );
        parser.ParseLines( input, lines );


        DefaultTextScene<std::stringstream> scene;

        BresenhamePlotter plotter;

        CPPUNIT_ASSERT_THROW
            (
            plotter.DrawLinesBeginLinesEndOnSceneWithDelegate( 
            lines.begin(), lines.end(), 
            &scene, &scene ),
            RangeException
            );
    }
}

void AsciiSceneTest::TestHorizontalSegmentRenderedCorrectly()
{
    Lines_vt lines;
    LinesParser parser;
    std::stringstream input( "( 8, 3) - ( 2, 3 )" );
    parser.ParseLines( input, lines );


    DefaultTextScene<std::stringstream> scene;

    BresenhamePlotter plotter;
    plotter.DrawLinesBeginLinesEndOnSceneWithDelegate( 
        lines.begin(), lines.end(), 
        &scene, &scene );

    //20X10 + newline
    const uchar*** pReceived = (const uchar***)scene.GetPixelMap();
    const uchar expected[20][11] = 
    {
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 'A' , 'A' , 'A' , 'A' , 'A' , 'A' , 'A' , 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
    };

    //hot fix

    int rawResult = memcmp( expected, pReceived, sceneSize );
    bool testResult = ( 0 == rawResult  );

    //bool testResult = ( 0 == memcmp( expected, (*pReceived), sceneSize ) );
    //bool testResult = std::equal( expected, expected + sceneSize,  );

    CPPUNIT_ASSERT( testResult );
}

void AsciiSceneTest::TestVerticalSegmentRenderedCorrectly()
{
    Lines_vt lines;
    LinesParser parser;
    std::stringstream input( "( 0, 8) - ( 0, 12 )" );
    parser.ParseLines( input, lines );


    DefaultTextScene<std::stringstream> scene;

    BresenhamePlotter plotter;
    plotter.DrawLinesBeginLinesEndOnSceneWithDelegate( 
        lines.begin(), lines.end(), 
        &scene, &scene );

    //20X10 + newline
    const uchar*** pReceived = (const uchar***)scene.GetPixelMap();
    const uchar expected[20][11] = 
    {
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        'A' , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        'A' , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        'A' , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        'A' , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        'A' , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
    };

    //hot fix

    int rawResult = memcmp( expected, pReceived, sceneSize );
    bool testResult = ( 0 == rawResult  );

    //bool testResult = ( 0 == memcmp( expected, (*pReceived), sceneSize ) );
    //bool testResult = std::equal( expected, expected + sceneSize,  );

    CPPUNIT_ASSERT( testResult );
}

void AsciiSceneTest::TestAverageSegmentRenderedCorrectly()
{
    CPPUNIT_FAIL( "Not implemented" );
}

void AsciiSceneTest::TestMultipleSegmentsRenderedCorrectly()
{
    CPPUNIT_FAIL( "Not implemented" );
}

